from enum import Enum
from pytket._tket.circuit import Circuit

class Tk2Circuit:
    def __init__(self, circ: Circuit) -> None: ...
    def circuit_cost(self, cost_fn) -> int: ...
    def node_op(self, node: Node) -> CustomOp: ...
    def to_tket1(self) -> Circuit: ...
    def apply_rewrite(self, rw) -> None: ...

class Tk2Op(Enum):
    H = 1
    CX = 2

class TypeBound(Enum):
    Any = 0
    Copable = 1
    Eq = 2

class HugrType:
    def __init__(self, extension: str, type_name: str, bound: TypeBound) -> None: ...
    @staticmethod
    def qubit() -> HugrType: ...
    @staticmethod
    def linear_bit() -> HugrType: ...
    @staticmethod
    def bool() -> HugrType: ...

class Node:
    def outs(self, n: int) -> list[Wire]: ...
    def __getitem__(self, i: int) -> Wire: ...

class Wire:
    def node(self) -> Node: ...

class CustomOp:
    def __init__(
        self,
        extension: str,
        op_name: str,
        input_types: list[HugrType],
        output_types: list[HugrType],
    ) -> None: ...
    def to_custom(self) -> CustomOp: ...

class Dfg:
    def __init__(
        self,
        input_types: list[HugrType],
        output_types: list[HugrType],
    ) -> None: ...
    def inputs(self) -> list[Wire]: ...
    def add_op(self, op: CustomOp, wires: list[Wire]) -> Node: ...
    def finish(self, outputs: list[Wire]) -> Tk2Circuit: ...

def to_hugr_dot(hugr: Tk2Circuit | Circuit) -> str: ...
def validate_hugr(hugr: Tk2Circuit | Circuit) -> None: ...
