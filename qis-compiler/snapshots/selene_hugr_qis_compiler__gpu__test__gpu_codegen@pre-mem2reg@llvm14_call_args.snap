---
source: qis-compiler/rust/gpu.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@arg_types = private unnamed_addr constant [7 x i8] c"iifb:v\00", align 1
@no_gpu_error = private unnamed_addr constant [27 x i8] c"No error message available\00", align 1

define private i64 @_hl.main.1(i64 %0, i64 %1, i64 %2, i64 %3, double %4, i1 %5) {
alloca_block:
  %"0" = alloca i64, align 8
  %"2_0" = alloca i64, align 8
  %"2_1" = alloca i64, align 8
  %"2_2" = alloca i64, align 8
  %"2_3" = alloca i64, align 8
  %"2_4" = alloca double, align 8
  %"2_5" = alloca i1, align 1
  %"4_0" = alloca i64, align 8
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  store i64 %0, i64* %"2_0", align 4
  store i64 %1, i64* %"2_1", align 4
  store i64 %2, i64* %"2_2", align 4
  store i64 %3, i64* %"2_3", align 4
  store double %4, double* %"2_4", align 8
  store i1 %5, i1* %"2_5", align 1
  %"2_01" = load i64, i64* %"2_0", align 4
  %"2_12" = load i64, i64* %"2_1", align 4
  %"2_23" = load i64, i64* %"2_2", align 4
  %"2_34" = load i64, i64* %"2_3", align 4
  %"2_45" = load double, double* %"2_4", align 8
  %"2_56" = load i1, i1* %"2_5", align 1
  %gpu_input_blob = alloca [25 x i8], align 1
  %dest_ptr = getelementptr inbounds [25 x i8], [25 x i8]* %gpu_input_blob, i64 0, i64 0
  %dest_i64_ptr = bitcast i8* %dest_ptr to i64*
  store i64 %"2_23", i64* %dest_i64_ptr, align 4
  %dest_ptr7 = getelementptr inbounds [25 x i8], [25 x i8]* %gpu_input_blob, i64 0, i64 8
  %dest_i64_ptr8 = bitcast i8* %dest_ptr7 to i64*
  store i64 %"2_34", i64* %dest_i64_ptr8, align 4
  %dest_ptr9 = getelementptr inbounds [25 x i8], [25 x i8]* %gpu_input_blob, i64 0, i64 16
  %dest_f64_ptr = bitcast i8* %dest_ptr9 to double*
  store double %"2_45", double* %dest_f64_ptr, align 8
  %dest_ptr10 = getelementptr inbounds [25 x i8], [25 x i8]* %gpu_input_blob, i64 0, i64 24
  %arg_i8 = zext i1 %"2_56" to i8
  store i8 %arg_i8, i8* %dest_ptr10, align 1
  %gpu_input_blob_ptr = getelementptr inbounds [25 x i8], [25 x i8]* %gpu_input_blob, i64 0, i64 0
  %6 = call i8 @gpu_call(i64 %"2_01", i64 %"2_12", i64 25, i8* %gpu_input_blob_ptr, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @arg_types, i32 0, i32 0))
  call void @validate_gpu_response(i8 %6)
  store i64 %"2_01", i64* %"4_0", align 4
  %"4_011" = load i64, i64* %"4_0", align 4
  store i64 %"4_011", i64* %"0", align 4
  %"012" = load i64, i64* %"0", align 4
  ret i64 %"012"
}

declare i8 @gpu_call(i64, i64, i64, i8*, i8*)

; Function Attrs: noinline
define void @validate_gpu_response(i8 %0) #0 {
entry:
  %success = icmp ne i8 %0, 0
  br i1 %success, label %ok, label %err

ok:                                               ; preds = %entry
  ret void

err:                                              ; preds = %entry
  call void @gpu_error_handler()
  unreachable
}

; Function Attrs: noinline
define void @gpu_error_handler() #0 {
entry:
  %error_message = call i8* @gpu_get_error()
  %is_null = icmp eq i8* %error_message, null
  %error_message_nonnull = select i1 %is_null, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @no_gpu_error, i32 0, i32 0), i8* %error_message
  call void @panic_str(i32 70002, i8* %error_message_nonnull)
  unreachable
}

declare i8* @gpu_get_error()

; Function Attrs: noreturn
declare void @panic_str(i32, i8*) #1

attributes #0 = { noinline }
attributes #1 = { noreturn }
