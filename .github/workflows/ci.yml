name: Continuous integration

on:
  push:
    branches:
      - main
  pull_request:
  merge_group:
    types: [checks_requested]
  workflow_dispatch: {}

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "--cfg=ci_run"
  MIRIFLAGS: '-Zmiri-permissive-provenance' # Required due to warnings in bitvec 1.0.1
  CI: true # insta snapshots behave differently on ci
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"
  # Pinned version for the uv package manager
  UV_VERSION: "0.4.20"
  UV_FROZEN: 1
  # The highest and lowest supported Python versions, used for testing
  PYTHON_HIGHEST: "3.13"
  PYTHON_LOWEST: "3.10"

  # different strings for install action and feature name
  # adapted from https://github.com/TheDan64/inkwell/blob/master/.github/workflows/test.yml
  LLVM_VERSION: "14.0"
  LLVM_FEATURE_NAME: "14-0"

jobs:
  # Check if changes were made to the relevant files.
  # Always returns true if running on the default branch, to ensure all changes are thoroughly checked.
  changes:
    name: Check for changes
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    # These outputs are always true when running after a merge to main, or if the PR has a `run-ci-checks` label.
    outputs:
      rust: ${{ steps.filter.outputs.rust == 'true' || steps.override.outputs.out == 'true' }}
      python: ${{ steps.filter.outputs.python == 'true' || steps.override.outputs.out == 'true' }}
      extensions: ${{ steps.filter.outputs.extensions == 'true' || steps.override.outputs.out == 'true' }}
    steps:
    - uses: actions/checkout@v4
    - name: Override label
      id: override
      run: |
        echo "Labels: ${{ github.event.pull_request.labels.*.name }}"
        echo "Label contains run-ci-checks: ${{ contains( github.event.pull_request.labels.*.name, 'run-ci-checks') }}"
        if [ "${{ github.event_name == 'pull_request' && contains( github.event.pull_request.labels.*.name, 'run-ci-checks') }}" == "true" ]; then
          echo "Overriding due to label 'run-ci-checks'"
          echo "out=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref_name == github.event.repository.default_branch }}" == "true" ]; then
          echo "Overriding due to running on the default branch"
          echo "out=true" >> $GITHUB_OUTPUT
        fi
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: .github/change-filters.yml


  build-tket1-passes:
    name: Build tket1-passes C++ library
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install conan
        uses: turtlebrowser/get-conan@v1.2
      - name: Set up conan
        run: |
          conan profile detect
          conan remote add tket-libs https://quantinuumsw.jfrog.io/artifactory/api/conan/tket1-libs --index 0
      - name: Build tket1-passes C++ library
        run: |
          cd tket1-passes/cpp
          ./build.sh
      - name: Upload tket1-passes C++ library as artifact
        uses: actions/upload-artifact@v4
        with:
          name: tket1-passes-lib
          path: tket1-passes/lib

  check-rs:
    name: Check Rust code ü¶Ä
    needs: [changes, build-tket1-passes]
    if: ${{ needs.changes.outputs.rust == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Download tket1-passes C++ library
        uses: actions/download-artifact@v4
        with:
          name: tket1-passes-lib
          path: tket1-passes/lib
      - name: Check formatting
        run: cargo fmt -- --check
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: ${{ env.LLVM_VERSION }}
      - name: Run clippy
        run: cargo clippy --all-targets --all-features --workspace -- -D warnings
      - name: Build docs
        run: cargo doc --no-deps --all-features --workspace
        env:
          RUSTDOCFLAGS: "-Dwarnings"

  check-py:
    name: Check Python code üêç
    needs: changes
    if: ${{ needs.changes.outputs.python == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
      - name: Install Python ${{ env.PYTHON_HIGHEST }}
        run: uv python install ${{ env.PYTHON_HIGHEST }}
      - name: Setup dependencies
        run: uv sync --python ${{ env.PYTHON_HIGHEST }}
      - name: Type check with mypy
        run: uv run mypy .
      - name: Check formatting with ruff
        run: uv run ruff format --check
      - name: Lint with ruff
        run: uv run ruff check

  benches:
    name: Continuous benchmarking üèãÔ∏è
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' && github.event_name != 'merge_group' }}
    runs-on: ubuntu-latest
    permissions:
      checks: write
    steps:
      - uses: actions/checkout@v4
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: cargo-bins/cargo-binstall@main
      - name: Install cargo-codspeed
        run: cargo binstall cargo-codspeed --force
      - name: Override criterion with the CodSpeed harness
        run: cargo add --dev codspeed-criterion-compat --rename criterion --package tket2
      - name: Build benchmarks
        run: cargo codspeed build --profile bench --features portmatching,binary-eccs,rewrite-tracing
      - name: Run benchmarks
        uses: CodSpeedHQ/action@v3
        with:
          token: ${{ secrets.CODSPEED_TOKEN }}
          run: "cargo codspeed run"

  # Run tests on Rust stable
  tests-rs-stable-no-features:
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' }}
    runs-on: ubuntu-latest
    name: tests (Rust stable, no features)
    steps:
      - uses: actions/checkout@v4
      - uses: mozilla-actions/sccache-action@v0.0.9
      - id: toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 'stable'
      - name: Configure default rust toolchain
        run: rustup override set ${{steps.toolchain.outputs.name}}
      - name: Build with no features
        run: cargo test --verbose -p tket2 -p tket2-py -p tket2-hseries --no-default-features --no-run
      - name: Tests with no features
        run: cargo test --verbose -p tket2 -p tket2-py -p tket2-hseries --no-default-features

  # Run tests on Rust stable
  tests-rs-stable-all-features:
    needs: [changes, build-tket1-passes]
    if: ${{ needs.changes.outputs.rust == 'true' }}
    runs-on: ubuntu-latest
    name: tests (Rust stable, all features)
    steps:
      - uses: actions/checkout@v4
      - uses: mozilla-actions/sccache-action@v0.0.9
      - id: toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 'stable'
      - name: Configure default rust toolchain
        run: rustup override set ${{steps.toolchain.outputs.name}}
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: ${{ env.LLVM_VERSION }}
      - name: Download tket1-passes C++ library
        uses: actions/download-artifact@v4
        with:
          name: tket1-passes-lib
          path: tket1-passes/lib
      - name: Build with all features
        run: cargo test --verbose --workspace --all-features --no-run
      - name: Tests with all features
        run: cargo test --verbose --workspace --all-features

  # Run tests on other toolchains
  tests-rs-other:
    needs: [changes, build-tket1-passes]
    if: ${{ needs.changes.outputs.rust == 'true' && github.event_name != 'merge_group' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        # Stable is covered by `tests-stable-no-features` and `tests-stable-all-features`
        # Nightly is covered by `tests-nightly-coverage`
        rust: ['1.85', beta]
    name: tests (Rust ${{ matrix.rust }})
    steps:
      - uses: actions/checkout@v4
      - uses: mozilla-actions/sccache-action@v0.0.9
      - id: toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: ${{ env.LLVM_VERSION }}
      - name: Download tket1-passes C++ library
        uses: actions/download-artifact@v4
        with:
          name: tket1-passes-lib
          path: tket1-passes/lib
      - name: Configure default rust toolchain
        run: rustup override set ${{steps.toolchain.outputs.name}}
      - name: Build with no features
        run: cargo test --verbose --workspace --no-default-features --no-run
      - name: Tests with no features
        run: cargo test --verbose --workspace --no-default-features
      - name: Build with all features
        run: cargo test --verbose --workspace --all-features --no-run
      - name: Tests with all features
        run: cargo test --verbose --workspace --all-features

  tests-nightly-coverage:
    needs: [changes, build-tket1-passes]
    # Run only if there are changes in the relevant files
    if: ${{ needs.changes.outputs.rust == 'true' && github.event_name != 'merge_group' }}
    runs-on: ubuntu-latest
    name: tests (Rust nightly, coverage)
    steps:
      - uses: actions/checkout@v4
      - uses: mozilla-actions/sccache-action@v0.0.9
      - uses: dtolnay/rust-toolchain@master
        with:
          # Nightly is required to count doctests coverage
          # TODO: Pinned due to <https://github.com/CQCL/hugr/issues/2227
          toolchain: "nightly-2025-05-14"
          components: llvm-tools-preview
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: ${{ env.LLVM_VERSION }}
      - name: Download tket1-passes C++ library
        uses: actions/download-artifact@v4
        with:
          name: tket1-passes-lib
          path: tket1-passes/lib
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Run tests with coverage instrumentation
        run: |
            cargo llvm-cov clean --workspace
            cargo llvm-cov --no-report --workspace --no-default-features --doctests
            cargo llvm-cov --no-report --workspace --all-features --doctests
      - name: Generate coverage report
        run: cargo llvm-cov --all-features report --codecov --output-path coverage.json
      - name: Upload coverage to codecov.io
        uses: codecov/codecov-action@v5
        with:
          files: coverage.json
          name: rust
          flags: rust
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  tests-py:
    needs: changes
    if: ${{ needs.changes.outputs.python == 'true' }}
    runs-on: ubuntu-latest
    name: tests (Python, coverage)
    steps:
      - uses: actions/checkout@v4
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
      - name: Install Python ${{ env.PYTHON_LOWEST }}
        run: uv python install ${{ env.PYTHON_LOWEST }}
      - name: Setup dependencies
        run: uv sync --python ${{ env.PYTHON_LOWEST }}
      - name: Run python tests with coverage instrumentation
        run: uv run pytest --cov=./ --cov-report=xml
      - name: Upload python coverage to codecov.io
        if: github.event_name != 'merge_group'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          # Ensures we only upload this file
          disable_search: true
          name: python
          flags: python
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # Ensure that serialized extensions match rust implementation
  tket2-extensions:
    needs: [changes, tests-rs-stable-all-features]
    if: ${{ needs.changes.outputs.rust == 'true' && github.event_name != 'merge_group' }}
    name: Check standard extensions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: extractions/setup-just@v3
      - name: Generate the updated definitions
        run: just gen-extensions
      - name: Check if the declarations are up to date
        run: |
          git diff --exit-code --name-only tket2-exts/src/tket2_exts/data
          if [ $? -ne 0 ]; then
            echo "The serialized standard extensions are not up to date"
            echo "Please run 'just gen-extensions' and commit the changes.
            Bump the version of tket2-exts according to semver.
            "
            exit 1
          fi
  extension-versions:
    runs-on: ubuntu-latest
    needs: [changes]
    if: ${{ needs.changes.outputs.extensions == 'true' }}
    name: Check extension versions
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to compare with main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Check if extension versions are updated
        run: |
            # Check against latest tag on the target branch
            # When not on a pull request, base_ref should be empty so we default to HEAD
            if [ -z "$TARGET_REF" ]; then
              BASE_SHA=""
            else
              BASE_SHA=$(git rev-parse origin/$TARGET_REF)
            fi
            LAST_TAG=$(git describe --abbrev=0 --match="tket2-*" $BASE_SHA)
            echo "Latest tag on target: $LAST_TAG"

            python ./scripts/check_extension_versions.py $LAST_TAG
        env:
          TARGET_REF: ${{ github.base_ref }}

  # This is a meta job to mark successful completion of the required checks,
  # even if they are skipped due to no changes in the relevant files.
  required-checks:
    name: Required checks ü¶Ä+üêç
    needs: [changes, check-rs, check-py, tests-rs-stable-no-features, tests-rs-stable-all-features, tests-py, tket2-extensions, extension-versions]
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - name: Debug changes step output
        run: |
          echo "Rust: ${{ needs.changes.outputs.rust }}"
          echo "Python: ${{ needs.changes.outputs.python }}"
      - name: Fail if required checks failed
        # This condition should simply be `if: failure() || cancelled()`,
        # but there seems to be a bug in the github workflow runner.
        #
        # See https://github.com/orgs/community/discussions/80788
        if: |
          needs.changes.result == 'failure' || needs.changes.result == 'cancelled' ||
          needs.check-rs.result == 'failure' || needs.check-rs.result == 'cancelled' ||
          needs.check-py.result == 'failure' || needs.check-py.result == 'cancelled' ||
          needs.tests-rs-stable-no-features.result == 'failure' || needs.tests-rs-stable-no-features.result == 'cancelled' ||
          needs.tests-rs-stable-all-features.result == 'failure' || needs.tests-rs-stable-all-features.result == 'cancelled' ||
          needs.tests-py.result == 'failure' || needs.tests-py.result == 'cancelled'
        run: |
          echo "Required checks failed"
          echo "Please check the logs for more information"
          exit 1
      - name: Pass if required checks passed
        run: |
          echo "All required checks passed"
