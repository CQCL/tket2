//! A parser grammar for pytket operation parameters
//!
//! The grammar is a subset of sympy expressions,
//! unrecognised expressions will be boxed opaquely.

// operation and variable identifiers
ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" )* }
variable = _{ ident }

// Explicit numeric constants.
positive_num = @{
    ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}
num = @{ "-"? ~ positive_num }

/// Infix operations (e.g. `2 + 2`),
///
/// The rust parser defines the operator precedence between these.
infix_operator = _{ add | subtract | multiply | divide | power }
    add       = { "+" }
    subtract  = { "-" }
    multiply  = { "*" }
    divide    = { "/" }
    power     = { "**" }
/// Function calls like (`max(2,4)`)
function_call = { ident ~ "(" ~ expr ~ ("," ~ expr)* ~ ","? ~ ")" }
/// Unary negation, with a special identifier
unary_minus = { "-" ~ term }
/// Implicit multiplication lets us write expressions like `2x`.
/// This has higher precedence that `infix_operator`s.
/// The second match is a subset of `term`.
implicit_multiply = { num ~ ("(" ~ expr ~ ")" | function_call | variable) }

/// Expressions are sequences of terms and infix operators
expr = { term ~ (infix_operator ~ term)* }
term = _{ "(" ~ expr ~ ")" | implicit_multiply | num | unary_minus | function_call | variable }

parameter = _{ SOI ~ expr ~ EOI }

WHITESPACE = _{ " " | "\t" }
